// Prisma.
import prisma from "./prisma";
import { PrismaAdapter } from "@auth/prisma-adapter";

// NextAuth.
import { NextAuthOptions } from "next-auth";
import NextAuth, { DefaultSession } from 'next-auth';

// Providers.
import Email from "next-auth/providers/email";
import GitHubProvider from "next-auth/providers/github";

// User session type.
declare module 'next-auth' {
  interface Session {
    user: {
      id: string;
    } & DefaultSession['user'];
  }
}

/**
 * NextAuth Configuration.
 */
export const authOptions: NextAuthOptions = {
	adapter: PrismaAdapter(prisma) as any,
	secret: process.env.NEXTAUTH_JWT_SECRET,
	providers: [
		GitHubProvider({
			clientId: process.env.GITHUB_ID ?? "",
			clientSecret: process.env.GITHUB_SECRET ?? "",
		}),
		Email({
			server: {
				host: process.env.SMTP_HOST,
				port: process.env.SMTP_PORT,
				auth: {
					user: process.env.SMTP_USER,
					pass: process.env.SMTP_PASSWORD,
				},
			},
			from: process.env.SMTP_FROM,
		}),
	],
	pages: {
		signIn: "/auth",
	},
	callbacks: {
		async signIn({ user, account, profile, email, credentials }) {
			return true;
		},
		async redirect({ baseUrl }) {
			return `${baseUrl}/dashboard`;
		},
		async session({ session, user, token }) {
			session.user = {...session.user, id: user.id};
			return session;
		},
		async jwt({ token, user, account, profile, isNewUser }) {
			return token;
		},
	},
};
